
mod adapter;
mod session;
mod error;
mod packet;
mod log;

//Generated by bindgen
#[allow(non_snake_case, dead_code, unused_variables, non_camel_case_types)]
mod wintun_raw;

pub use adapter::*;
pub use session::*;
pub use error::*;
pub use packet::*;
pub use ::log::*;

pub use crate::wintun_raw::WINTUN_MIN_RING_CAPACITY as MIN_RING_CAPACITY;
pub use crate::wintun_raw::WINTUN_MAX_RING_CAPACITY as MAX_RING_CAPACITY;

use std::sync::Arc;

pub fn load() -> Result<Arc<wintun_raw::wintun>, libloading::Error> {
    load_from_path("wintun")
}

pub fn load_from_path<P>(path: P) -> Result<Arc<wintun_raw::wintun>, libloading::Error>
where
    P: AsRef<::std::ffi::OsStr>,
{
    Ok(Arc::new(unsafe {
        wintun_raw::wintun::new(path)?
    }))
}
